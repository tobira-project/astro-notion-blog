---
import Layout from '../layouts/Layout.astro'
import '../styles/tobiracast.css'
---

<Layout title="マイページ | TOBIRACAST" path="/mypage">
  <div slot="main" class="profile-container">
    <div id="loading-state" class="loading-state">
      <p>読み込み中...</p>
    </div>

    <div id="not-logged-in" class="not-logged-in" style="display: none;">
      <div class="message-card">
        <svg class="lock-icon" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
          <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
        </svg>
        <h2>ログインしてください</h2>
        <p>マイページを表示するには、ログインが必要です。</p>
        <a href="/login" class="login-link">ログインページへ</a>
      </div>
    </div>

    <div id="profile-content" class="profile-content" style="display: none;">
      <div class="profile-header">
        <h1>マイページ</h1>
        <p class="profile-subtitle">アカウント情報</p>
      </div>

      <div class="profile-card">
        <div class="info-section">
          <label>メールアドレス</label>
          <p id="user-email" class="user-email">---</p>
        </div>

        <div class="info-section">
          <label>登録日時</label>
          <p id="user-created" class="user-created">---</p>
        </div>
      </div>

      <div class="action-buttons">
        <button id="logout-btn" class="logout-btn">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          ログアウト
        </button>
      </div>
    </div>
  </div>
</Layout>

<style>
  .profile-container {
    width: 100%;
    margin: 0;
    padding: 0;
  }

  .loading-state {
    text-align: center;
    padding: 4rem 2rem;
    color: #666;
    font-size: 1.1rem;
  }

  .not-logged-in {
    text-align: center;
    padding: 2rem;
  }

  .message-card {
    background: white;
    border: 2px solid rgba(255, 111, 0, 0.2);
    border-radius: 16px;
    padding: 3rem 2rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    max-width: 500px;
    margin: 0 auto;
  }

  .lock-icon {
    color: var(--tobiracast-primary-orange);
    margin-bottom: 1.5rem;
  }

  .message-card h2 {
    font-size: 1.8rem;
    font-weight: 700;
    color: #333;
    margin-bottom: 1rem;
  }

  .message-card p {
    color: #666;
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }

  .login-link {
    display: inline-block;
    padding: 1rem 2.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: white;
    background: linear-gradient(135deg, var(--tobiracast-primary-orange), var(--tobiracast-dark-orange));
    border-radius: 12px;
    text-decoration: none;
    transition: all 0.3s ease;
    box-shadow: 0 4px 16px rgba(255, 111, 0, 0.3);
  }

  .login-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(255, 111, 0, 0.4);
    color: white;
  }

  .profile-header {
    text-align: center;
    margin-bottom: 3rem;
    margin-top: 2rem;
  }

  .profile-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--tobiracast-primary-blue);
    margin-bottom: 1rem;
  }

  .profile-subtitle {
    color: #6b7280;
    font-size: 1.1rem;
  }

  .profile-card {
    background: white;
    border: 2px solid rgba(23, 121, 222, 0.1);
    border-radius: 16px;
    padding: 2.5rem;
    margin: 0 auto 2rem;
    max-width: 800px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
  }

  .info-section {
    margin-bottom: 2rem;
  }

  .info-section:last-child {
    margin-bottom: 0;
  }

  .info-section label {
    display: block;
    font-size: 0.85rem;
    font-weight: 600;
    color: #666;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .info-section p {
    font-size: 1.1rem;
    color: #333;
    padding: 0.75rem 1rem;
    background: rgba(23, 121, 222, 0.05);
    border-radius: 8px;
    word-break: break-all;
  }

  .action-buttons {
    display: flex;
    justify-content: center;
  }

  .logout-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    color: #dc2626;
    background: white;
    border: 2px solid #dc2626;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(220, 38, 38, 0.1);
  }

  .logout-btn:hover {
    background: #dc2626;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(220, 38, 38, 0.3);
  }

  .logout-btn:active {
    transform: translateY(0);
  }

  .logout-btn svg {
    width: 18px;
    height: 18px;
  }

  @media (max-width: 768px) {
    .profile-container {
      padding: 2rem 1rem;
    }

    .profile-header h1 {
      font-size: 2rem;
    }

    .profile-card {
      padding: 1.5rem;
    }

    .logout-btn {
      width: 100%;
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .profile-header h1 {
      font-size: 1.75rem;
    }

    .profile-subtitle {
      font-size: 1rem;
    }

    .info-section p {
      font-size: 1rem;
    }
  }
</style>

<script>
  import { initializeApp } from 'firebase/app'
  import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth'

  const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
    measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID
  }

  const app = initializeApp(firebaseConfig)
  const auth = getAuth(app)

  const loadingState = document.getElementById('loading-state')
  const notLoggedIn = document.getElementById('not-logged-in')
  const profileContent = document.getElementById('profile-content')
  const userEmailEl = document.getElementById('user-email')
  const userCreatedEl = document.getElementById('user-created')
  const logoutBtn = document.getElementById('logout-btn')

  onAuthStateChanged(auth, (user) => {
    if (user) {
      // ユーザー情報を表示
      if (userEmailEl) userEmailEl.textContent = user.email || '未設定'
      if (userCreatedEl && user.metadata.creationTime) {
        const date = new Date(user.metadata.creationTime)
        userCreatedEl.textContent = date.toLocaleDateString('ja-JP', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })
      }

      // コンテンツを表示
      if (loadingState) loadingState.style.display = 'none'
      if (profileContent) profileContent.style.display = 'block'
    } else {
      // 未ログインの場合はメッセージを表示
      if (loadingState) loadingState.style.display = 'none'
      if (notLoggedIn) notLoggedIn.style.display = 'block'
    }
  })

  // ログアウト処理
  logoutBtn?.addEventListener('click', async () => {
    try {
      await signOut(auth)
      window.location.href = '/'
    } catch (error) {
      alert('ログアウトに失敗しました')
    }
  })
</script>
