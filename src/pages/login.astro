---
import Layout from '../layouts/Layout.astro'
---

<Layout title="ログイン / 新規登録" path="/login">
  <div slot="main" class="page-container">
    <div class="card">
      <header class="page-header">
        <h1 class="page-title">ログイン / 新規登録</h1>
        <p class="page-description">
          Tobiratoryアカウントでログインまたは新規登録して、限定コンテンツにアクセスしましょう。
        </p>
      </header>

      <div class="content-section">
        <!-- 認証エラー表示 -->
        <div id="auth-error" class="error-message" style="display: none;"></div>
        
        <!-- アカウント作成中表示 -->
        <div id="account-creating" class="loading-container" style="display: none;">
          <div class="spinner"></div>
          <h2>アカウントを準備中...</h2>
          <p id="status-message">アカウント確認中...</p>
          <p class="status-note">
            この処理には時間がかかる場合があります。<br>
            ブラウザを閉じても、次回ログイン時に続きから処理されます。
          </p>
          <!-- リトライボタン -->
          <button id="retry-button" class="retry-btn" style="display: none;">
            もう一度試す
          </button>
        </div>

        <!-- ログインフォーム -->
        <div id="login-form">
          <!-- Googleログインボタン -->
          <button id="google-login" class="social-btn google-btn">
            <svg width="20" height="20" viewBox="0 0 24 24">
              <path fill="#4285f4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34a853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#fbbc05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#ea4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span>Googleでログイン</span>
          </button>

          <!-- Appleログインボタン -->
          <button id="apple-login" class="social-btn apple-btn">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/>
            </svg>
            <span>Appleでログイン</span>
          </button>

          <div class="divider">
            <span>または</span>
          </div>

          <!-- メール認証フォーム（Magic Link方式） -->
          <form id="email-login-form">
            <div class="form-group">
              <label class="form-label">メールアドレス</label>
              <input
                type="email"
                id="email-input"
                placeholder="your@email.com"
                required
                class="form-input"
              />
            </div>
            <button type="submit" id="email-submit-btn" class="btn-primary">メールでログイン / 新規登録</button>
            <p class="magic-link-note">
              入力したメールアドレスにログインリンクを送信します<br>
              新規の方は自動的にアカウントが作成されます
            </p>
          </form>

        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .error-message {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.75rem;
    padding: 1rem;
    margin-bottom: 1.5rem;
    color: #dc2626;
    font-size: 0.875rem;
  }

  .loading-container {
    text-align: center;
    padding: 2rem 0;
  }

  .spinner {
    width: 3rem;
    height: 3rem;
    border: 2px solid #e5e7eb;
    border-top: 2px solid var(--tobiracast-primary-blue);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .loading-container h2 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .loading-container p {
    color: #6b7280;
    margin-bottom: 1rem;
  }

  .status-note {
    font-size: 0.875rem;
    color: #9ca3af !important;
  }

  .social-btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    margin-bottom: 1rem;
    border: none;
  }

  .google-btn {
    border: 2px solid #e5e7eb;
    background-color: #ffffff;
    color: #374151;
  }

  .google-btn:hover:not(:disabled) {
    background-color: #f9fafb;
    border-color: #d1d5db;
    transform: translateY(-1px);
  }

  .apple-btn {
    border: 2px solid #1f2937;
    background-color: #111827;
    color: #ffffff;
    margin-bottom: 1.5rem;
  }

  .apple-btn:hover:not(:disabled) {
    background-color: #1f2937;
    transform: translateY(-1px);
  }

  .social-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .divider {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background-color: #e5e7eb;
  }

  .divider span {
    position: relative;
    display: block;
    text-align: center;
    background-color: white;
    padding: 0 1rem;
    color: #6b7280;
    font-size: 0.875rem;
  }

  .magic-link-note {
    font-size: 0.75rem;
    color: #6b7280;
    text-align: center;
    margin-top: 0.5rem;
    line-height: 1.4;
  }

  .retry-btn {
    margin-top: 1.5rem;
    padding: 0.75rem 2rem;
    background-color: var(--tobiracast-primary-orange);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .retry-btn:hover {
    background-color: #d97706;
    transform: translateY(-1px);
  }

  /* Form styles */
  .form-group {
    margin-bottom: 1.25rem;
  }

  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    color: #374151;
    font-weight: 500;
    font-size: 0.875rem;
  }

  .form-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: all 0.2s;
    background-color: white;
  }

  .form-input:focus {
    outline: none;
    border-color: var(--tobiracast-primary-blue);
    box-shadow: 0 0 0 3px rgba(23, 121, 222, 0.1);
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  .btn-primary {
    width: 100%;
    padding: 0.875rem 1rem;
    background: linear-gradient(135deg, var(--tobiracast-primary-blue), #1565c0);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    margin-bottom: 0.5rem;
  }

  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(23, 121, 222, 0.3);
  }

  .btn-primary:active {
    transform: translateY(0);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .login-page {
      padding: 1rem;
    }

    .login-container {
      padding: 1.5rem;
    }

    .page-title {
      font-size: 1.5rem;
    }

    .page-description {
      font-size: 0.875rem;
    }

    .social-btn {
      padding: 0.625rem 0.875rem;
      font-size: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .login-page {
      padding: 0.5rem;
    }

    .login-container {
      padding: 1rem;
    }

    .page-title {
      font-size: 1.25rem;
    }

    .social-btn svg {
      width: 18px;
      height: 18px;
    }
  }
</style>

<script>
  import { initializeApp } from 'firebase/app'
  import { 
    getAuth,
    GoogleAuthProvider,
    OAuthProvider,
    signInWithPopup,
    sendSignInLinkToEmail,
    isSignInWithEmailLink,
    signInWithEmailLink,
    onAuthStateChanged
  } from 'firebase/auth'

  // Firebase設定
  const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
    measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID
  }

  const app = initializeApp(firebaseConfig)
  const auth = getAuth(app)
  const API_URL = import.meta.env.PUBLIC_API_URL || 'https://asia-northeast1-tobiratory-f6ae1.cloudfunctions.net'

  // Magic Link設定（tobiratory-webと同じ）
  const actionCodeSettings = {
    url: window.location.origin + '/login',
    handleCodeInApp: true,
  }

  // デバッグ: 設定を確認
  console.log('Firebase Config:', {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY ? '設定済み' : '未設定',
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  })
  console.log('Action Code Settings:', actionCodeSettings)

  // DOM要素
  const authError = document.getElementById('auth-error')
  const accountCreating = document.getElementById('account-creating')
  const loginForm = document.getElementById('login-form')
  const statusMessage = document.getElementById('status-message')
  const googleLoginBtn = document.getElementById('google-login')
  const appleLoginBtn = document.getElementById('apple-login')
  const emailForm = document.getElementById('email-login-form')
  const retryButton = document.getElementById('retry-button')

  // エラー表示
  function showError(message: string) {
    authError.textContent = message
    authError.style.display = 'block'
  }

  // エラー非表示
  function hideError() {
    authError.style.display = 'none'
  }

  // ロード中表示
  function showLoading(message: string) {
    hideError()
    loginForm.style.display = 'none'
    accountCreating.style.display = 'block'
    statusMessage.textContent = message
  }

  // フォーム表示
  function showForm() {
    accountCreating.style.display = 'none'
    loginForm.style.display = 'block'
    googleLoginBtn.disabled = false
    appleLoginBtn.disabled = false
    googleLoginBtn.querySelector('span').textContent = 'Googleでログイン'
    appleLoginBtn.querySelector('span').textContent = 'Appleでログイン'
  }

  // Tobiratoryアカウント作成
  async function createTobiratoryAccount(idToken: string) {
    const signupResponse = await fetch(`${API_URL}/native/signup`, {
      method: 'POST',
      headers: {
        'Authorization': idToken,
        'Content-Type': 'application/json'
      }
    })
    
    // 409 Conflict = すでにアカウントが存在する場合はOKとして扱う
    if (signupResponse.status === 409) {
      console.log('Tobiratoryアカウントは既に存在します')
      return
    }
    
    if (!signupResponse.ok) {
      throw new Error(`Tobiratoryアカウント作成に失敗しました (${signupResponse.status})`)
    }
  }

  // Flowアカウント作成
  async function createFlowAccount(idToken: string) {
    const flowResponse = await fetch(`${API_URL}/native/create-flow`, {
      method: 'POST',
      headers: {
        'Authorization': idToken,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ locale: 'ja' })
    })
    
    // 409 Conflict = すでにFlowアカウントが存在する場合はポーリングを実行
    if (flowResponse.status === 409) {
      console.log('Flowアカウントは既に存在するか作成中です')
      await pollForCompletion()
      return
    }

    if (!flowResponse.ok) {
      throw new Error(`Flowアカウント作成リクエストに失敗しました (${flowResponse.status})`)
    }

    // 作成完了まで待機
    await pollForCompletion()
  }

  // ポーリングによる完了待機
  async function pollForCompletion() {
    // テスト用に調整可能な設定
    const maxRetry = import.meta.env.DEV ? 6 : 100  // 開発環境では6回（1分）
    const sleepTime = import.meta.env.DEV ? 10000 : 10000  // 10秒
    
    console.log(`ポーリング開始: maxRetry=${maxRetry}, sleepTime=${sleepTime}ms`)
    
    for (let i = 0; i < maxRetry; i++) {
      await new Promise(resolve => setTimeout(resolve, sleepTime))
      
      const currentIdToken = await auth.currentUser?.getIdToken()
      const checkResponse = await fetch(`${API_URL}/native/my/profile`, {
        method: 'GET',
        headers: {
          'Authorization': currentIdToken,
          'Content-Type': 'application/json'
        }
      })
      
      const checkProfile = await checkResponse.json()
      console.log(`ポーリング ${i+1}/${maxRetry}:`, checkProfile)
      
      // 上司の指示通りのレスポンス形式に対応
      if (checkProfile.status === 'success') {
        showLoading('アカウント作成完了')
        setTimeout(() => window.location.href = '/', 1000)
        return
      } else if (checkProfile.status === 'error' && checkProfile.data === 'flow-account-create-error') {
        // エラー時は再試行
        showLoading('エラー発生 - Flowアカウント再作成中...')
        await createFlowAccount(currentIdToken)
        return
      }
      
      // 進捗表示の更新
      showLoading(`アカウント作成中... (${i+1}/${maxRetry})`)
    }
    
    throw new Error('アカウント作成がタイムアウトしました')
  }

  // tobiratory-webと同じ認証フロー
  async function handleTobiratoryAccountSetup() {
    try {
      showLoading('プロフィール確認中...')
      
      const idToken = await auth.currentUser?.getIdToken()
      if (!idToken) throw new Error('認証されていません')
      
      // プロフィール取得
      const profileResponse = await fetch(`${API_URL}/native/my/profile`, {
        method: 'GET',
        headers: {
          'Authorization': idToken,
          'Content-Type': 'application/json'
        }
      })
      
      const profile = await profileResponse.json()
      
      // 上司の指示通りのレスポンス形式に対応
      if (profile.status === 'success') {
        showLoading('ログイン完了')
        setTimeout(() => window.location.href = '/', 1000)
        return
      }
      
      // エラーレスポンスの場合のデータ処理
      if (profile.status === 'error') {
        switch (profile.data) {
          case 'account-not-exists':
            // Tobiratory AccountとFlowアカウントを作る
            showLoading('Tobiratoryアカウントを作成中...')
            await createTobiratoryAccount(idToken)
            showLoading('Flowアカウントを作成中...')
            await createFlowAccount(idToken)
            return
            
          case 'flow-account-not-exists':
            // Flowアカウントを作る
            showLoading('Flowアカウントを作成中...')
            await createFlowAccount(idToken)
            return
            
          case 'flow-address-creating':
          case 'flow-account-retrying':
            // 作成中/再試行中 - 完了を待つ
            showLoading('Flowアカウント作成中（処理継続中）...')
            await pollForCompletion()
            return
            
          case 'flow-account-create-error':
            // エラー発生 - Flowアカウントを作り直し
            showLoading('エラー発生 - Flowアカウント再作成中...')
            await createFlowAccount(idToken)
            return
        }
      }
      
    } catch (error) {
      console.error('Account setup error:', error)
      
      // エラー時はリトライボタンを表示
      accountCreating.style.display = 'block'
      loginForm.style.display = 'none'
      statusMessage.textContent = error.message || 'アカウント作成に失敗しました'
      retryButton.style.display = 'block'
      
      // スピナーを隠す
      const spinner = accountCreating.querySelector('.spinner')
      if (spinner) spinner.style.display = 'none'
    }
  }

  // Firebase認証状態監視
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      await handleTobiratoryAccountSetup()
    } else {
      showForm()
    }
  })

  // Googleログイン
  googleLoginBtn.addEventListener('click', async () => {
    hideError()
    googleLoginBtn.disabled = true
    googleLoginBtn.querySelector('span').textContent = 'ログイン中...'
    
    try {
      const provider = new GoogleAuthProvider()
      await signInWithPopup(auth, provider)
    } catch (error) {
      showForm()
      if (error.code === 'auth/popup-closed-by-user') {
        showError('ログインがキャンセルされました')
      } else {
        showError('Googleログインに失敗しました')
      }
    }
  })

  // Appleログイン
  appleLoginBtn.addEventListener('click', async () => {
    hideError()
    appleLoginBtn.disabled = true
    appleLoginBtn.querySelector('span').textContent = 'ログイン中...'
    
    try {
      const provider = new OAuthProvider('apple.com')
      await signInWithPopup(auth, provider)
    } catch (error) {
      showForm()
      if (error.code === 'auth/popup-closed-by-user') {
        showError('ログインがキャンセルされました')
      } else {
        showError('Appleログインに失敗しました')
      }
    }
  })

  // リトライボタン
  retryButton.addEventListener('click', async () => {
    console.log('リトライボタンがクリックされました')
    
    // UIリセット
    retryButton.style.display = 'none'
    const spinner = accountCreating.querySelector('.spinner')
    if (spinner) spinner.style.display = 'block'
    
    // 再度認証フローを実行
    if (auth.currentUser) {
      await handleTobiratoryAccountSetup()
    } else {
      showForm()
      showError('ログインしてください')
    }
  })

  // Magic Linkメール認証（tobiratory-webと同じ）
  const emailSubmitBtn = document.getElementById('email-submit-btn')

  emailForm?.addEventListener('submit', async (e) => {
    e.preventDefault()
    hideError()

    const email = (document.getElementById('email-input') as HTMLInputElement).value
    const originalBtnText = emailSubmitBtn.textContent

    console.log('メール送信開始:', email)
    console.log('actionCodeSettings:', actionCodeSettings)

    try {
      // ボタンを無効化して送信中表示
      emailSubmitBtn.disabled = true
      emailSubmitBtn.textContent = '送信中...'

      await sendSignInLinkToEmail(auth, email, actionCodeSettings)
      console.log('メール送信成功')

      // メールアドレスを保存
      window.localStorage.setItem('emailForSignIn', email)

      // 成功メッセージを表示
      showError('✓ ログインリンクを送信しました！メールをご確認ください。')
      authError.style.backgroundColor = '#f0fdf4'
      authError.style.borderColor = '#bbf7d0'
      authError.style.color = '#16a34a'

      // ボタンを「送信済み」に変更
      emailSubmitBtn.textContent = '送信済み'
      emailSubmitBtn.style.backgroundColor = '#10b981'

      // 入力欄をクリア
      document.getElementById('email-input').value = ''

    } catch (error) {
      console.error('メール送信エラー:', error)

      // ボタンを元に戻す
      emailSubmitBtn.disabled = false
      emailSubmitBtn.textContent = originalBtnText

      if (error.code === 'auth/invalid-email') {
        showError('メールアドレスの形式が正しくありません')
      } else if (error.code === 'auth/missing-email') {
        showError('メールアドレスを入力してください')
      } else {
        showError(`メール送信に失敗しました: ${error.message}`)
      }
    }
  })

  // ページ読み込み時にMagic Linkをチェック（tobiratory-webと同じ）
  window.addEventListener('load', async () => {
    if (isSignInWithEmailLink(auth, window.location.href)) {
      let email = window.localStorage.getItem('emailForSignIn')
      if (!email) {
        // ユーザーがメールリンクを別のデバイスで開いた場合
        email = window.prompt('確認のためメールアドレスを入力してください：')
      }
      
      if (email) {
        try {
          showLoading('メールリンクでログイン中...')
          await signInWithEmailLink(auth, email, window.location.href)
          window.localStorage.removeItem('emailForSignIn')
          // onAuthStateChangedが自動的にhandleTobiratoryAccountSetupを呼ぶ
        } catch {
          showForm()
          showError('メールリンクでのログインに失敗しました')
        }
      } else {
        showForm()
        showError('メールアドレスが必要です')
      }
    }
  })
</script>
