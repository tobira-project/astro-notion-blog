---
// このコンポーネントはクライアントサイドでログイン状態を管理します
---

<div id="auth-status-container">
  <!-- ログイン前の表示 -->
  <div id="logged-out-nav" class="auth-nav">
    <a href="/login" class="login-btn">ログイン</a>
  </div>
  
  <!-- ログイン後の表示 -->
  <div id="logged-in-nav" class="auth-nav" style="display: none;">
    <div class="user-menu">
      <button class="user-menu-toggle">
        <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" class="user-icon">
          <path d="M10 10c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
        </svg>
        <span id="user-label">アカウント</span>
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="chevron-icon">
          <path d="M4 6l4 4 4-4"/>
        </svg>
      </button>
      <div class="user-dropdown" style="display: none;">
        <div class="user-info">
          <p class="user-info-label">アカウント情報</p>
          <p id="user-email-full" class="user-email"></p>
        </div>
        <hr class="dropdown-divider">
        <button id="logout-btn" class="logout-btn">ログアウト</button>
      </div>
    </div>
  </div>
</div>

<style>
  #auth-status-container {
    position: relative;
    z-index: 99999;
  }

  .auth-nav {
    display: flex;
    align-items: center;
  }

  /* 他のナビゲーションボタンと全く同じスタイル */
  .login-btn {
    display: block;
    padding: 16px 32px;
    color: white;
    text-decoration: none;
    border-radius: 16px;
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    font-weight: 700;
    font-size: 1.1rem;
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    text-shadow: none;
    min-width: 140px;
    text-align: center;
  }

  .login-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.5);
    color: white;
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
  }

  .user-menu {
    position: relative;
    z-index: 99999;
  }

  /* アカウントボタンも同じスタイル */
  .user-menu-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 16px 32px;
    color: white;
    border-radius: 16px;
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    font-weight: 700;
    font-size: 1.1rem;
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    text-shadow: none;
    min-width: 140px;
    cursor: pointer;
  }

  .user-menu-toggle:hover {
    background: rgba(255, 255, 255, 0.3);
    border: 2px solid rgba(255, 255, 255, 0.5);
    color: white;
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.15);
  }
  
  .user-icon {
    opacity: 0.9;
  }
  
  .chevron-icon {
    opacity: 0.7;
    transition: transform 0.2s;
  }
  
  .user-menu-toggle:hover .chevron-icon {
    transform: translateY(1px);
  }

  .user-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 8px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(0, 0, 0, 0.1);
    min-width: 300px;
    max-width: 400px;
    z-index: 999999;
    overflow: hidden;
  }

  .user-info {
    padding: 16px;
    min-height: 80px;
  }

  .user-info-label {
    margin: 0 0 8px 0;
    color: #6b7280;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .user-email {
    margin: 0;
    color: #111827;
    font-size: 13px;
    font-weight: 500;
    word-break: break-all;
    line-height: 1.4;
  }

  .dropdown-divider {
    margin: 0;
    border: none;
    border-top: 1px solid #e5e7eb;
  }

  .logout-btn {
    width: 100%;
    padding: 12px 16px;
    background: white;
    border: none;
    color: #dc2626;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    text-align: left;
    transition: background 0.2s;
    position: relative;
    z-index: 999999;
  }

  .logout-btn:hover {
    background: #fef2f2;
  }

  @media (max-width: 768px) {
    .user-menu-toggle {
      background: transparent;
      color: var(--tobiracast-primary-blue);
      border: 2px solid transparent;
      padding: 8px 16px;
      font-size: 0.85rem;
      min-width: auto;
      border-radius: 8px;
    }

    .user-menu-toggle:hover {
      background: rgba(59, 130, 246, 0.1);
      border-color: var(--tobiracast-primary-blue);
      transform: none;
    }

    .user-dropdown {
      min-width: 280px;
      max-width: calc(100vw - 40px);
      right: -10px;
    }

    .login-btn {
      background: transparent;
      color: var(--tobiracast-primary-blue);
      border: 2px solid transparent;
      padding: 8px 16px;
      font-size: 0.85rem;
      min-width: auto;
      border-radius: 8px;
    }

    .login-btn:hover {
      background: rgba(59, 130, 246, 0.1);
      border-color: var(--tobiracast-primary-blue);
      transform: none;
    }

    .auth-nav {
      margin: 0;
      width: 100%;
    }
  }
</style>

<script>
  import { initializeApp } from 'firebase/app'
  import { getAuth, onAuthStateChanged, signOut } from 'firebase/auth'

  // Firebase設定
  const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
    measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID
  }

  const app = initializeApp(firebaseConfig)
  const auth = getAuth(app)

  // DOM要素
  const loggedOutNav = document.getElementById('logged-out-nav')
  const loggedInNav = document.getElementById('logged-in-nav')
  const userLabel = document.getElementById('user-label')
  const userEmailFull = document.getElementById('user-email-full')
  const logoutBtn = document.getElementById('logout-btn')
  const userMenuToggle = document.querySelector('.user-menu-toggle')
  const userDropdown = document.querySelector('.user-dropdown')

  // ドロップダウンメニューの開閉
  userMenuToggle?.addEventListener('click', (e) => {
    e.stopPropagation()
    const isOpen = userDropdown.style.display === 'block'
    userDropdown.style.display = isOpen ? 'none' : 'block'
  })

  // ドロップダウン外クリックで閉じる
  document.addEventListener('click', () => {
    if (userDropdown) userDropdown.style.display = 'none'
  })

  // ログアウト処理
  logoutBtn?.addEventListener('click', async () => {
    try {
      await signOut(auth)
      window.location.href = '/'
    } catch (error) {
      console.error('ログアウトエラー:', error)
    }
  })

  // 認証状態の監視
  onAuthStateChanged(auth, (user) => {
    if (user) {
      // ログイン済み
      loggedOutNav.style.display = 'none'
      loggedInNav.style.display = 'flex'
      
      // ユーザー情報を表示（ドロップダウン内のみ）
      const email = user.email || ''
      
      // ボタンには「アカウント」と表示（メールアドレスは非表示）
      userLabel.textContent = 'アカウント'
      
      // ドロップダウン内にメールアドレスを表示
      userEmailFull.textContent = email
      
      // フッターのリンクも更新
      const footerAuthLink = document.getElementById('footer-auth-link')
      if (footerAuthLink) {
        footerAuthLink.textContent = 'マイページ'
        footerAuthLink.href = '/profile'
      }
    } else {
      // 未ログイン
      loggedOutNav.style.display = 'flex'
      loggedInNav.style.display = 'none'
      
      // フッターのリンクも更新
      const footerAuthLink = document.getElementById('footer-auth-link')
      if (footerAuthLink) {
        footerAuthLink.textContent = 'ログイン'
        footerAuthLink.href = '/login'
      }
    }
  })
</script>